{
  "name": "Pure-fun",
  "tagline": "Purely functional data structures for OCaml, translated from Chris Okasaki's book \"Purely Functional Data Structures\"",
  "body": "Pure-Fun - Purely Functional Data Structures for OCaml\r\n======================================================\r\n\r\n---------------------------------------------------------------------------\r\n\r\nWhat is `Pure-Fun`?\r\n-------------------\r\n\r\nThe files in this project contain an SML-to-[OCaml](http://www.ocaml.org)\r\ntranslation of source examples taken from the following\r\n[book](http://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504):\r\n\r\n```text\r\nPurely Functional Data Structures\r\nChris Okasaki\r\nCambridge University Press, 1998\r\nCopyright (c) 1998 Cambridge University Press\r\n```\r\n\r\nNotes Regarding the Translation\r\n-------------------------------\r\n\r\nThe first nine chapters are translated now.  There are two further chapters,\r\nwhose implementation requires polymorphic recursion.  This feature was not\r\navailable in OCaml for a while, which is why they have not been translated yet.\r\nFeel free to contribute them!\r\n\r\nThis translation is as close as possible to the original code, but some\r\ndeviations from the original were necessary.  The following rules / differences\r\nto the original sources exist:\r\n\r\n### No base module\r\n\r\nSince there is hardly anything indispensable in the base module, its relevant\r\ncontents was copied into each module.  This allows for easier testing,\r\nbecause the modules do not depend on others.\r\n\r\n### Syntax\r\n\r\nNames are created by the following rules:\r\n\r\n  * Module types are written in capitals.  If they consist of more than a\r\n    word, an underscore (`_`) is placed between the words.\r\n\r\n  * Names of exceptions follow the same rule as modules types.\r\n\r\n  * Module implementations have to start with a capital letter, the rest of\r\n    the name is lowercase - except if it consists of more than one word.\r\n    In this case the first letter of the following word is uppercase.\r\n    There is no underscore between words.\r\n\r\n### Currying of function parameters\r\n\r\nCurrying is not used anywhere in the original source.  The translation\r\ncurries parameters where it makes sense.  Tuples that represent a named type\r\n(e.g. some data structure) are _not_ curried in functions that are hidden by\r\na signature restriction.  This seems to aid comprehension.  Functions offered\r\nvia the module interface (signature) do not reveal such implementation details\r\n(i.e. the concrete type) anyway.\r\n\r\n### Superfluous bindings\r\n\r\nIf a parameter is never used in a following expression, it is not bound to\r\nany name.  The underscore (`_`) will hold its place.\r\n\r\n### Lazy evaluation\r\n\r\nThe syntax for lazy evaluation used to implement the data structures\r\nand algorithms that require them is quite different from the original.\r\nThe `lazy` type is used to specify data structures that need lazy evaluation.\r\nOCaml recently also introduced pattern matching on lazy values, which is\r\nused throughout.\r\n\r\nTo make the syntax at least a bit more similar to the original, we have\r\nalso introduced the prefix operator (`!$`), which stands for `force` -\r\nit forces evaluation of a lazy expression.  To make an expression lazy,\r\nthe OCaml-keyword `lazy` is used.\r\n\r\nThere is a test function at the end of the translation of chapter 4, the\r\nchapter in which lazy evaluation and streams (= lazy lists) are introduced.\r\nUncomment it to see how lazy evaluation works.\r\n\r\nNotes on Efficiency\r\n-------------------\r\n\r\nBecause the data structures are purely functional, they profit a lot from\r\ngarbage collector settings.  In case you find that some of them are not\r\nefficient enough, you might want to raise the memory overhead parameter of\r\nthe garbage collector.  Performance is in general excellent.\r\n\r\n---------------------------------------------------------------------------\r\n\r\nContact Information and Contributing\r\n------------------------------------\r\n\r\nIn the case of bugs, feature requests, contributions and similar, you can\r\ncontact me here: <markus.mottl@gmail.com>\r\n\r\nUp-to-date information should be available at:\r\n<http://mmottl.github.io/pure-fun>\r\n\r\nEnjoy!\r\n\r\nMarkus Mottl in Rutherford, NJ on July 10, 2012\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}